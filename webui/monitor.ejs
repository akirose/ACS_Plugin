<%- contentFor('head') %>
<script src="//cdn.jsdelivr.net/bluebird/3.4.0/bluebird.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript">
	var current_plugin_pid = -1;

	$(document).ready(function() {
		var socket = io("/monitor");
		socket.on('connect', function() {
			socket.emit('greet', { type: 'monitor' });

			$('select#plugins > option:not(:first)').remove();
			$('select#chat-user > option:not(:first)').remove();
			$('div#chat-window > .panel-body').empty();
			$.chat('', 'Connected to monitor server.', 'info');
		});

		// plug-in information
		socket.on('plugin_info', function(plugin_info) {
			var plugins = $('select#plugins');
			var option = $("<option></option>")
							.attr('data-pid', plugin_info.pid)
							.attr('data-listen-port', plugin_info.options.listen_port)
							.val(plugin_info.pid)
							.text("#" + plugin_info.options.listen_port + " (PID:" + plugin_info.pid + ")");
			plugins.append(option);

			// sort by PID
			var options = plugins.find('option:not(:first)');
			options.sort(function(a, b) {
				var apid = Number(a.getAttribute('data-listen-port')),
					bpid = Number(b.getAttribute('data-listen-port'));
				if(apid > bpid) return 1;
				else if(bpid > apid) return -1;
				return 0;
			});
			options.detach().appendTo(plugins);

			// current session information
			this.emit('session_info', plugin_info.pid);

			var handler;
			new Promise(function(resolve, reject) {
					handler = function(pid, session_info) {
						if(plugin_info.pid === pid && session_info.session_index === session_info.current_session_index)  {
							resolve(session_info);
							socket.removeListener('session_info', handler);
						}
					};
					socket.on('session_info', handler);
				}).then(function(session_info) {
					socket.emit('car_info', plugin_info.pid, -1);
					return session_info;
				}).timeout(1000).error(function(error) {
					var option = $('select#plugins > option[value=' + plugin_info.pid + ']');
					option.text('#' + plugin_info.options.listen_port + ' (' + plugin_info.pid + ') - Not yet been connected.');
				}).finally(function() {
					socket.removeListener('session_info', handler);
				});
		});

		socket.on('plugin_disconnect', function(pid) {
			var plugins = $("select#plugins");
			var value = plugins.val();
			plugins.find('option[data-pid=' + pid + ']').remove();
			$('select#chat-user > option[data-pid=' + pid + ']').remove();
			if(value !== plugins.val()) {
				plugins.trigger('change');
			}

			$.chat("server", "Stop plug-in (PID:" + pid + ")", "danger");
		});

		socket.on('new_connection', function(pid, car_info) {
			if(current_plugin_pid !== -1 && current_plugin_pid !== Number(pid)) return;

			var plugin = $('select#plugins > option[value=' + pid + ']');
			var server_name = plugin.attr('data-server-name');
			var listen_port = plugin.attr('data-listen-port');
			$.chat('plugin-' + listen_port, car_info.driver_name + ' is connected to ' + server_name, 'info');
		});

		socket.on('connection_closed', function(pid, car_info) {
			if(current_plugin_pid !== -1 && current_plugin_pid !== Number(pid)) return;

			var chatuser = $("select#chat-user").find('option[data-pid=' + pid +'][value=' + car_info.car_id + ']');
			chatuser.remove();

			var plugin = $('select#plugins > option[value=' + pid + ']');
			var server_name = plugin.attr('data-server-name');
			var listen_port = plugin.attr('data-listen-port');
			$.chat('plugin-' + listen_port, car_info.driver_name + ' has terminated the connection from ' + server_name, 'info');
		});

		socket.on('session_info', function(pid, session_info) {
			var option = $('select#plugins > option[value=' + pid + ']');
			option.attr('data-server-name', session_info.server_name);
			option.text('#' + option.attr('data-listen-port') + ' (' + pid + ') - ' + '[' + session_info.name + '] '+ session_info.server_name);

			if(current_plugin_pid === -1 || current_plugin_pid === Number(pid)) {
				$.chat('plugin-' + option.attr('data-listen-port'), session_info.server_name + ' - ' + session_info.name, 'info');
			}
		});

		socket.on('car_info', function(pid, car_info) {
			if(current_plugin_pid !== -1 && current_plugin_pid !== Number(pid)) return;

			var chatuser = $("select#chat-user");
			var plugin = $('select#plugins > option[value=' + pid + ']');
			var option = $("<option></option>")
							.attr('data-pid', pid);

			$.each(($.isArray(car_info) ? car_info : [ car_info ]), function(index, car_info) {
				if(chatuser.find('option[data-pid=' + pid +'][value=' + car_info.car_id + ']').size() > 0) {
					return;
				}

				option.clone()
					.attr('data-driver-name', car_info.driver_name)
					.attr('data-driver-guid', car_info.driver_guid)
					.val(car_info.car_id)
					.text( (Number(current_plugin_pid) === -1 ? '(' + plugin.attr('data-listen-port') + ') ' : '') + car_info.driver_name )
					.appendTo(chatuser);
			});
		});

		socket.on('chat', function(pid, name, message, type) {
			if(current_plugin_pid !== -1 && current_plugin_pid !== Number(pid)) return;

			$.chat(name, message, type);
		});

		$("#run_plugin_btn").click(function() {
			$("select#plugins > option:not(:first)").remove();
		});

		$("select#plugins").change(function() {
			current_plugin_pid = Number(this.value);

			if(current_plugin_pid > 0) {
				$('select#chat-user').find('option:not(:first)').each(function(index, element) {
					var option = $(element);
					if(current_plugin_pid !== Number(option.attr('data-pid'))) {
						option.remove();
					} else {
						option.text(option.attr('data-driver-name'));
					}
				});
			} else {
				$('select#chat-user').find('option:not(:first)').remove();
				socket.emit('car_info', current_plugin_pid, -1);
			}
		});

		$("select#chat-user").change(function() {
			var chatuser = $("select#chat-user");
			if(chatuser.find("option:first").prop('selected') === true) {
				chatuser.find("option:not(:first)").removeAttr("selected");
			}
			if(chatuser.find("option:selected").size() === 0) {
				chatuser.find("option:first").attr('selected', 'selected');
			}
		});

		// input chat message
		$("input#chat").keypress(function(event) {
			if(event.which == 13) {
				$("button#chat-send").trigger("click");
			}
		});
		$("button#chat-send").click(function() {
			var chat = $("input#chat");
			var type = 'default';

			if($.trim(chat.val()).length === 0) {
				chat.val('');
				return;
			}

			if(chat.val().toString().indexOf('/') === 0) {
				socket.emit('chat', current_plugin_pid, -1, chat.val());
				type = 'warning';
			} else {
				$("select#chat-user > option:selected").each(function(index, chatuser) {
					if(Number(chatuser.value) >= 0) {
						socket.emit('chat', chatuser.getAttribute('data-pid'), chatuser.value, chat.val());
					} else {
						socket.emit('chat', current_plugin_pid, -1, chat.val());
					}
				});
			}
			$.chat('me', chat.val(), type);
			chat.val('');
		});

		$("#ballast_btn").click(function(e) {
			//$('#ballast_modal').modal({ backdrop: 'static', keyboard: true });
			// Only one penalty at a time can be applied
			var chatuser = $("select#chat-user");
			var selected = chatuser.find("option:selected");

			if(selected.size() > 1 || Number(selected.val()) === -1) {
				bootbox.alert("Only one penalty at a time can be applied. Please select only one.");
			} else if(selected.size() === 0) {
				bootbox.alert("Please select one.")
			} else {
				bootbox.prompt("Ballast weight?", function(weight) {
					if(weight === null) return;
					else if(!$.isNumeric(weight) || Number(weight) < 0 || Number(weight) > 200) {
						bootbox.alert("Ballast can only use numbers from '0-200'.");
						return;
					}

					var car_id = Number(selected.val());
					var pid = selected.attr('data-pid');
					socket.emit('ballast', pid, car_id, weight);
				});
			}
		});

		$("#kick_btn, #ban_btn").click(function(e) {
			var self = this;
			var chatuser = $("select#chat-user");
			var selected = chatuser.find("option:selected");

			if(selected.size() > 1 || Number(selected.val()) === -1) {
				bootbox.alert("Please select only one.");
			} else if(selected.size() === 0) {
				bootbox.alert("Please select one.")
			} else {
				bootbox.confirm("Are you sure you want to kick " + selected.text(), function(result) {
					if(result === false) return;

					var command = $(self).text().toLowerCase() + 'User';
					var car_id = Number(selected.val());
					var pid = selected.attr('data-pid');
					socket.emit(command, pid, car_id);
				});
			}
		});
		/*
		$('#ballast_modal').on('show.bs.modal', function(e) {
			$(this).find('button#ballast_ok_btn').click(function(e) {
			});
			$(this).find('button#ballast_cancel_btn').click(function(e) {
				$('#ballast_modal').modal('hide');
			});
		}).on('hide.bs.modal', function(e) {
			$(this).find('button').off('click');
		});*/
	});

	$.chat = function(from, message, type) {
		type = type || 'default';
		var chatwindow = $("div#chat-window > .panel-body");
		var msg = $("<div></div>")
						.addClass('form-group')
						.addClass('bg-' + type)
						.append($("<label></label>")
									.addClass('control-label')
									.addClass('col-md-2')
									.text(from))
						.append($("<div></div>")
									.addClass('col-md-10')
									.append($("<p></p>")
										.addClass('form-control-static')
										.text(message)));

		if(chatwindow.find('div.form-group').size() > 100) {
			chatwindow.find('div.form-group:first').remove();
		}
		chatwindow.append(msg);

		var scrollheight = chatwindow.prop('scrollHeight');
		chatwindow.scrollTop(scrollheight);
	};
</script>
<%- contentFor('body') %>
<div class="panel panel-default">
	<div class="panel-heading">
		<div class="row form-horizontal">
			<label class="control-label col-md-1" for="plugins">Plug-in</label>
			<div class="col-md-5">
				<select id="plugins" class="form-control">
					<option data-pid="-1" value="-1">All</option>
				</select>
			</div>
		</div>
	</div>
	<div class="panel-body">
		<div class="row">
			<div class="col-md-3">
				<div class="form-group">
					<select id="chat-user" multiple class="form-control chat-user">
						<option value="-1" selected>All (Server message)</option>
					</select>
				</div>
				<div class="form-group">
					<div class="btn-group btn-group-justified" role="group">
						<div class="btn-group" role="group">
							<button type="button" id="ballast_btn" class="btn btn-success">Ballast</button>
						</div>
						<div class="btn-group" role="group">
							<button type="button" id="kick_btn" class="btn btn-warning">Kick</button>
						</div>
						<div class="btn-group" role="group">
							<button type="button" id="ban_btn" class="btn btn-danger">Ban</button>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-9">
				<div id="chat-window" class="panel panel-default chat-window">
					<div class="panel-body form-horizontal">
					</div>
				</div>
				<div class="input-group">
					<input id="chat" type="text" class="form-control" />
					<span class="input-group-btn">
    					<button id="chat-send" class="btn btn-default" type="button">Send</button>
    				</span>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- div id="ballast_modal" class="modal fade">
	<div class="modal-dialog modal-sm">
		<div class="modal-content">
			<div class="modal-body form-horizontal">
				<div class="form-group has-feedback">
					<label class="control-label col-md-4" for="weight">Weight</label>
					<div class="col-md-7">
						<input type="text" id="weight" name="weight" class="form-control" />
						<span class="glyphicon glyphicon-scale form-control-feedback" aria_hidden="true"></span>
					</div>
				</div>
				<div class="row">
					<label class="col-md-offset-4">
						<input type="checkbox" value="1">
						<small>Save to data.json</small>
					</label>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" id="ballast_ok_btn" class="btn btn-primary">OK</button>
				<button type="button" id="ballast_cancel_btn" class="btn btn-primary">Cancel</button>
			</div>
		</div>
	</div>
</div -->